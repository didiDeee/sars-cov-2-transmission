{"version":3,"sources":["lookup-component/service.tsx","common-components/spinner.tsx","lookup-component/lookup-component.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["jsonParseSafe","text","JSON","parse","e","parseResponse","response","status","Promise","resolve","then","OpenCovidService","getSimpleInfo","reject","fetch","console","log","catch","error","getCasesByDayAndHealthUnit","date","healthUnit","dateString","format","queryUrl","data","summary","cases","getTotalPopulationByHealthUnit","hr","forEach","unit","HR_UID","pop","getCodesAndPopulations","hrData","dict","Map","set","province","health_region","id","getLocationData","latitude","longitude","topHits","results","address_components","matches","hit","push","short_name","CenterBigSpinnerComponent","className","role","React","LookupComponent","props","state","isLoaded","simpleData","pickedDate","moment","toDate","populationMap","percentage","onDatePick","bind","handleSubmit","location","Array","from","this","entries","key","includes","event","setState","found","locationKey","i","length","r","findLocation","total","get","toFixed","toString","Error","loadedData","map","isArray","errorMsg","spinner","onSubmit","selected","onChange","type","step","placeholder","target","value","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba720c98.chunk.js","sourcesContent":["import {Moment} from \"moment\";\n\nconst API_KEY:string = \"AIzaSyBL3Obbx4Z6ziRQpgMq0Sy3QeQa-HYON7Y\";\n\nfunction jsonParseSafe(text: string): any {\n    if (null == text || \"\" == text) {\n        return {};\n    }\n    try {\n        return JSON.parse(text);\n    } catch (e) {\n        return {};\n    }\n}\n\nfunction parseResponse(response: any) {\n    if (response.status === 500) return Promise.resolve({});\n    return response.text().then(jsonParseSafe);\n}\n\nexport class OpenCovidService {\n    static getSimpleInfo = (): Promise<string> => {\n\n        return new Promise(((resolve: (result: string) => void, reject: (error: Error) => void) => {\n            fetch(\"https://api.opencovid.ca/summary\")\n                .then((response) => {\n                    console.log(response)\n                    response.text().then(resolve)\n                })\n                .catch((error) => {\n                    reject(error)\n                })\n        }));\n    }\n\n    static getCasesByDayAndHealthUnit = (date: Moment, healthUnit: number): Promise<number> => {\n        let dateString = date.format('YYYY-MM-DD');\n        let queryUrl = \"https://api.opencovid.ca/summary?\" +\n            \"stat=cases&before=\" + dateString +\n            \"&after=\" + dateString +\n            \"&loc=\" + healthUnit\n        return new Promise(((resolve: (result: number) => void, reject: (error: Error) => void) => {\n            fetch(queryUrl)\n                .then((response) => {\n                    parseResponse(response).then((data: any) => {\n                        console.log(data)\n                        let summary = data.summary[0];\n                        resolve(summary.cases);\n                    })\n                })\n                .catch((error) => {\n                    reject(error)\n                })\n        }));\n    }\n\n    static getTotalPopulationByHealthUnit = (healthUnit: number): Promise<number> => {\n        let queryUrl = \"https://api.opencovid.ca/other?stat=hr\"\n        return new Promise(((resolve: (result: number) => void, reject: (error: Error) => void) => {\n            fetch(queryUrl)\n                .then((response) => {\n                    parseResponse(response).then((data:any) => {\n                        let hrData = data.hr;\n                        hrData.forEach((unit: any) => {\n                            if (unit.HR_UID == healthUnit) {\n                                resolve(unit.pop)\n                            }\n                        })\n                        resolve(-1)\n                    })\n                })\n                .catch((error) => {\n                    reject(error)\n                })\n        }));\n    }\n\n    static getCodesAndPopulations = (): Promise<Map<any, any>> => {\n        let queryUrl = \"https://api.opencovid.ca/other?stat=hr\"\n\n        return new Promise((resolve: (result: Map<any, any>) => void, reject: (error: Error) => void) => {\n            fetch(queryUrl)\n                .then((response) => {\n                    parseResponse(response).then((data:any) => {\n                        let hrData = data.hr;\n                        let dict = new Map()\n                        hrData.forEach((unit: any) => {\n                            dict.set(unit.province + \"|\" + unit.health_region, {id: unit.HR_UID, pop: unit.pop})\n                        })\n                        resolve(dict)\n                    })\n                })\n                .catch((error) => {\n                    reject(error)\n                })\n        });\n    }\n\n    static getLocationData = (latitude: string, longitude: string): Promise<string[]> => {\n        let queryUrl = \"https://maps.googleapis.com/maps/api/geocode/json?\" +\n            \"latlng=\"+ latitude + \",\" + longitude +\n            \"&sensor=true\" +\n            \"&key=\" + API_KEY\n\n        return new Promise((resolve: (result: string[]) => void) => {\n            fetch(queryUrl)\n                .then((response) => {\n                    parseResponse(response).then((data:any) => {\n                        let topHits = data.results[0].address_components\n                        let matches:string[] = [];\n                        topHits.forEach((hit:any) => {\n                            matches.push(hit.short_name)\n                        })\n                        resolve(matches);\n                    })\n                })\n        })\n    }\n}\n","import * as React from \"react\";\n\nexport class CenterBigSpinnerComponent extends React.Component {\n    render() {\n        return <div className=\"d-flex justify-content-center\">\n            <div className=\"spinner-border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </div>\n        </div>;\n    }\n}\n","import React, {SyntheticEvent, useState} from \"react\";\nimport {OpenCovidService} from \"./service\";\nimport {CenterBigSpinnerComponent} from \"../common-components/spinner\";\nimport DatePicker from \"react-datepicker\";\nimport moment from \"moment\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\n\n\nclass LookupComponentProps {\n}\n\nclass LookupComponentState {\n    error: Error | null = null;\n    isLoaded: boolean = false;\n    simpleData: string = \"\";\n    longitude: string = \"\";\n    latitude: string = \"\";\n    healthUnit: string = \"\";\n    pickedDate: Date = moment().toDate();\n    populationMap: Map<any, any> = new Map();\n    percentage: string = \"\";\n\n}\n\nexport class LookupComponent extends React.Component<any, LookupComponentState>{\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            simpleData: \"\",\n            longitude: \"\",\n            latitude: \"\",\n            healthUnit: \"\",\n            pickedDate: moment().toDate(),\n            populationMap: new Map<any, any>(),\n            percentage: \"\"\n        }\n\n        // bind submit\n        this.onDatePick = this.onDatePick.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    findLocation (location: string):string {\n        // this.state.populationMap.forEach((value: any, key: string) => {\n        //     // console.log(key)\n        // })\n        for (let entry of Array.from(this.state.populationMap.entries())) {\n            let key = entry[0]\n            if (key.includes(location)) {\n                return key;\n            }\n        }\n        return \"\";\n    }\n\n    handleSubmit(event: SyntheticEvent) {\n        this.setState({\n            isLoaded: false,\n            error: null\n        });\n\n        let date = moment(this.state.pickedDate);\n        // let healthUnit = parseInt(this.state.healthUnit);\n\n        // try to match location first\n        OpenCovidService.getLocationData(this.state.latitude, this.state.longitude)\n            .then((results:string[]) => {\n                console.log(results)\n                let found = false;\n                let locationKey:string = \"\"\n                for (let i = 0; i < results.length; i++){\n                    let r: string = results[i];\n                    locationKey = this.findLocation(r);\n                    if (locationKey.length > 0) {\n                        found = true;\n                        let total = this.state.populationMap.get(locationKey).pop\n                        let healthUnit = this.state.populationMap.get(locationKey).id\n                        // if match, then get the other info\n                        OpenCovidService.getCasesByDayAndHealthUnit(date, healthUnit)\n                            .then((cases: number) => {\n                                this.setState({\n                                    percentage: (cases / total * 0.32 * 100).toFixed(4).toString() + \"%\",\n                                    longitude: this.state.longitude,\n                                    latitude: this.state.latitude,\n                                    error: null,\n                                    isLoaded: true\n                                })\n                            })\n                        break;\n                    }\n                }\n\n                // if we can't find location\n                if (!found) {\n                    this.setState({\n                        error: new Error(\"cannot find location, try using the health code instead\"),\n                        isLoaded: true,\n                        percentage: \"cannot find location, try using the health code instead\"\n                    })\n                }\n            });\n    }\n\n    componentDidMount() {\n        OpenCovidService.getSimpleInfo()\n            .then((loadedData: string) => {\n                this.setState({\n                    error: null,\n                    isLoaded: true,\n                    simpleData: loadedData\n                })\n            }, (error) => {\n                this.setState({error: error})\n            });\n\n        OpenCovidService.getCodesAndPopulations()\n            .then((map: Map<any, any>) => {\n                this.setState({populationMap: map})\n                console.log(map)\n            })\n\n    }\n\n    onDatePick(date: Date | [Date, Date] | null) {\n        console.log(date)\n        if (!date) {\n            this.setState({pickedDate: moment().toDate()})\n        }\n        else if (Array.isArray(date)) {\n            this.setState({pickedDate: date[0]})\n        } else {\n            this.setState({pickedDate: date})\n        }\n    }\n\n    render() {\n        // used to test\n        if (!this.state.isLoaded) {\n            return <CenterBigSpinnerComponent />\n        }\n\n        let errorMsg = <div/>;\n        let spinner = <div/>\n        if (this.state.error) {\n            errorMsg = <div>Unexpected Error, please try again later</div>\n        }\n\n        let data:string = this.state.simpleData;\n\n\n        return <div className={\"lookup\"}>\n            {errorMsg}\n            {spinner}\n            <form onSubmit={this.handleSubmit}>\n                <div className={\"form-group\"}>\n                    <label>Date</label>\n                    {/*<DatePicker selected={startDate} onChange={date => setStartDate(date)} />*/}\n                    <DatePicker selected={this.state.pickedDate}\n                                onChange={this.onDatePick}/>\n                </div>\n                <div className={\"form-group\"}>\n                    <label>Location</label>\n                    <input type=\"number\"\n                           step=\"0.0000001\"\n                           className=\"form-control\"\n                           id=\"lattitude\"\n                           placeholder=\"lattitude\"\n                           onChange={(event) => this.setState({latitude: event.target.value})}/>\n                    <input type=\"number\"\n                           step=\"0.0000001\"\n                           className=\"form-control\"\n                           id=\"longitutde\"\n                           placeholder=\"longitutde\"\n                           onChange={(event) => {this.setState({longitude: event.target.value})}}/>\n                    <input type=\"text\"\n                           className=\"form-control\"\n                           id=\"user-name-owner\"\n                           placeholder=\"health unit code\"\n                           onChange={event => this.setState({healthUnit: event.target.value})}/>\n                    <button type=\"submit\" className=\"btn btn-primary\">\n                        Search\n                    </button>\n\n                </div>\n            </form>\n\n            <div>percentage: {this.state.percentage}</div>\n        </div>\n    }\n\n\n}\n","import React from 'react';\nimport './App.css';\nimport {LookupComponent} from \"./lookup-component/lookup-component\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <LookupComponent/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap-css-only/css/bootstrap.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}